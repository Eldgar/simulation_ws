// Generated by gencpp from file tortoisebot_waypoints/WaypointActionFeedback.msg
// DO NOT EDIT!


#ifndef TORTOISEBOT_WAYPOINTS_MESSAGE_WAYPOINTACTIONFEEDBACK_H
#define TORTOISEBOT_WAYPOINTS_MESSAGE_WAYPOINTACTIONFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace tortoisebot_waypoints
{
template <class ContainerAllocator>
struct WaypointActionFeedback_
{
  typedef WaypointActionFeedback_<ContainerAllocator> Type;

  WaypointActionFeedback_()
    : position()
    , state()  {
    }
  WaypointActionFeedback_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointActionFeedback_

typedef ::tortoisebot_waypoints::WaypointActionFeedback_<std::allocator<void> > WaypointActionFeedback;

typedef boost::shared_ptr< ::tortoisebot_waypoints::WaypointActionFeedback > WaypointActionFeedbackPtr;
typedef boost::shared_ptr< ::tortoisebot_waypoints::WaypointActionFeedback const> WaypointActionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator1> & lhs, const ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator1> & lhs, const ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tortoisebot_waypoints

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4294e775dffb1318490841da75ade3a4";
  }

  static const char* value(const ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4294e775dffb1318ULL;
  static const uint64_t static_value2 = 0x490841da75ade3a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tortoisebot_waypoints/WaypointActionFeedback";
  }

  static const char* value(const ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"geometry_msgs/Point position\n"
"string state\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointActionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tortoisebot_waypoints::WaypointActionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TORTOISEBOT_WAYPOINTS_MESSAGE_WAYPOINTACTIONFEEDBACK_H
