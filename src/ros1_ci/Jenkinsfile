pipeline {
    agent any  // Use any available agent
    environment {
        DISPLAY = ":2"
    }
    stages {
        stage('Setup Environment') {
            steps {
                sh '''
                # Source ROS 1 Noetic and workspace
                source /opt/ros/noetic/setup.bash
                source ~/simulation_ws/devel/setup.bash
                
                echo "ROS 1 environment set up."
                '''
            }
        }

        stage('Build Workspace') {
            steps {
                sh '''
                source /opt/ros/noetic/setup.bash
                source ~/simulation_ws/devel/setup.bash

                cd ~/simulation_ws
                '''
            }
        }

        stage('Launch Gazebo') {
            steps {
                sh '''
                source /opt/ros/noetic/setup.bash
                source ~/simulation_ws/devel/setup.bash
                export DISPLAY=:2
                roslaunch tortoisebot_gazebo tortoisebot_playground.launch &
                GAZEBO_PID=$!
                sleep 10
                echo "Gazebo started with PID $GAZEBO_PID."
                '''
            }
        }


        stage('Check Simulation Status') {
            steps {
                sh '''
                source /opt/ros/noetic/setup.bash
                source ~/simulation_ws/devel/setup.bash

                # Check if Gazebo is running
                if pgrep -x "gzserver" > /dev/null; then
                    echo "Gazebo is running."
                else
                    echo "Gazebo is NOT running."
                    exit 1
                fi
                '''
            }
        }

        stage('Cleanup') {
            steps {
                sh '''
                source /opt/ros/noetic/setup.bash
                source ~/simulation_ws/devel/setup.bash

                # Kill Gazebo processes after the test
                pkill -f gzserver || true
                pkill -f gzclient || true
                echo "Gazebo shut down."
                '''
            }
        }
    }

    triggers {
        pollSCM('H/4 * * * *')  // Poll GitHub for changes every 4 minutes
    }
}
