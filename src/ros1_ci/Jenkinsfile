pipeline {
    agent any  // Use any available agent

    stages {
        stage('Build Docker Image') {
            steps {
                sh '''
                cd $WORKSPACE/src/
                sudo docker build -t tortoisebot_ros1 .
                '''
            }
        }

        stage('Run Gazebo Simulation') {
            steps {
                sh '''
                # Launch the Gazebo container in detached mode with host networking.
                sudo docker run --rm \
                    -e DISPLAY=:2 \
                    -e QT_X11_NO_MITSHM=1 \
                    -v /tmp/.X11-unix:/tmp/.X11-unix \
                    --name gazebo_container \
                    tortoisebot_ros1 \
                    /bin/bash -c "source /opt/ros/noetic/setup.bash && \
                                  source ~/simulation_ws/devel/setup.bash && \
                                  roslaunch tortoisebot_gazebo tortoisebot_playground.launch"
                                  
                # Wait for 3 minutes to allow Gazebo to load
                sleep 240
                '''
            }
        }

        stage('Run Action Server') {
            steps {
                sh '''
                sudo docker run --rm \
                    tortoisebot_ros1 \
                    /bin/bash -c "source /opt/ros/noetic/setup.bash && \
                                  cd ~/simulation_ws && catkin_make && source devel/setup.bash && \
                                  rosrun course_web_dev_ros tortoisebot_action_server.py"
                '''
            }
        }

        stage('Run Waypoints Test') {
            steps {
                sh '''
                sudo docker run --rm \
                    tortoisebot_ros1 \
                    /bin/bash -c "source /opt/ros/noetic/setup.bash && \
                                  cd ~/simulation_ws && catkin_make && source devel/setup.bash && \
                                  rostest tortoisebot_waypoints waypoints_test.test --reuse-master"
                '''
            }
        }
    }

    triggers {
        pollSCM('H/4 * * * *')  // Poll GitHub for changes every 4 minutes
    }
}



