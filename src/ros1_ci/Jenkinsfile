pipeline {
    agent any
    environment {
        DISPLAY = "${env.DISPLAY}" // Inherit the DISPLAY
    }
    stages {
        stage('Build Docker Image') {
            steps {
                sh '''
                cd $WORKSPACE/src/
                sudo docker build -t tortoisebot_ros1 .
                '''
            }
        }
        stage('Launch Gazebo in Docker') {
            steps {
                sh '''
                if [ "$(sudo docker ps -aq -f name=gazebo_container)" ]; then
                    sudo docker stop gazebo_container || true
                    sudo docker rm gazebo_container || true
                fi

                sudo docker run --rm \
                    -e DISPLAY=$DISPLAY \
                    -v /tmp/.X11-unix:/tmp/.X11-unix \
                    --name gazebo_container \
                    tortoisebot_ros1 \
                    bash -c "source /opt/ros/noetic/setup.bash && source devel/setup.bash && roslaunch tortoisebot_gazebo tortoisebot_playground.launch"

                echo "Gazebo container finished."
                '''
            }
        }
        stage('Check Container Logs') {
            steps {
                sh '''
                sudo docker logs gazebo_container
                '''
            }
        }
        /*
        stage('Cleanup') {
            steps {
                sh '''
                echo "Stopping and removing gazebo_container..."
                sudo docker stop gazebo_container || true
                sudo docker rm gazebo_container || true
                echo "Docker container cleaned up."
                '''
            }
        }
        */
    }
    triggers {
        pollSCM('H/3 * * * *')
    }
}

